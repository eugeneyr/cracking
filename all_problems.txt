CTCI, 6th edition
=================

Chapter 1
---------
String Manipulation

1.1. Implement an algorithm to determine if a string has all unique characters.
     What if you cannot use additional data structures?

1.2. Given two strings, write a method to decide is one is a permutation of the other.

1.3. URLify: Write a method to replace all spaces in a string with '%20'. You may assume that the string
     has sufficient space at the end to hold the additional characters, and that you are given the 'true'
     length of the string. (Note: if implementing in Java, please use a character array so that you can
     perform the operation in place)

1.4. Palindrome Permutation:
     Given a string, write a function to check if it is a permutation of a palindrome.
     A palindrome is a word or a phrase that is the same forwards and backwards.
     A permutation is a rearrangement of letters.
     The palindrome does not to be limited to just dictionary words.
     (Note: according to the examples in the book space characters should be ignored)

1.5. One Away:
     There are three types of edits that can be performed on strings:
     insert a character, remove a character, or replace a character.
     Given two strings, write a function to check if they are one edit (or zero edits) away.

1.6. String Compression:
     Implement a method to perform basic string compression using the counts of repeated characters.
     For example, the string aabcccccaaa would become a2b1c5a3. If the "compressed" string would not become smaller
     than the original string, your method should return the original string.
     You can assume the string has only uppercase and lowercase letters (a-z).

1.7. Rotate Matrix:
     Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes,
     write a method to rotate the image by 90 degrees.
     Can you do it in place?

1.8. Zero Matrix:
     Write an algorithm such that if an element in an MxN matrix is 0, its entire row and column are set to 0.

1.9. String Rotation:
     Assume you have a methid isSubstring which checks in one word is a substring of another.
     Given two strings, s1 and s2, write code to check is s2 is a rotation of s1 using only one call to isSubstring
     (e.g., "waterbottle" is rotation of "erbottlewat")

Chapter 2
---------
Lists

2.1. Remove Dups:
     Write code to remove duplicates from an unsorted linked list.
     FOLLOW UP:
     How would you solve this problem if a temporary buffer is not allowed?

2.2. Return Kth to Last:
     Implement an algorithm to find the kth to last element of a singly linked list.

2.3. Delete Middle Node:
     Implement an algorithm to delete a node in the middle of a singly linked list, given only access to that node.
     EXAMPLE
     Input: the node c from the linked list a->b->c->d->e
     Result: nothing is returned, but the linked list looks like a->b->d->e

2.4. Partition:
     Write code to partition a linked list around a value x, such that all nodes less than x come before
     all nodes greater than or equal to x.
     If x is contained within the list, the values of x only need to be after the elements less than x (see below)
     EXAMPLE:
     Input: 3 -> 5 -> 8 -> 5 -> 10 -> 2 -> 1 [partition = 5]
     Output: 3 -> 1-> 2 -> 10 -> 5 -> 5 -> 8

2.5. Sum Lists
     You have two numbers represented by a linked list, where each node contains a single digit.
     The digits ae stored in reverse order, such that the 1's digit is at the head of the list.
     Write a function that adds the two numbers and returns the sum as a linked list.

     EXAMPLE:

     Input: (7 -> 1 -> 6) + (5 -> 9 -> 2). That is, 617 + 295
     Output: 2 -> 1 -> 9. That is, 912

     FOLLOW UP

     Suppose the digits are stored in forward order. Repeat the above problem.

     EXAMPLE

     Input: (6 -> 1 -> 7) + (2 -> 9 -> 5). That is, 617 + 295
     Output: 9 -> 1 -> 2. That is, 912

2.6. Palindrome:
     Implement a function to check if a linked list is a palindrome.

2.7. Intersection:
     Given two (singly) linked lists, determine if the two lists intersect. Return the intersecting node.
     Note that intersection is based on reference, not value. That is, if the kth node of the first linked list
     is the exact same node (by reference) as the jth node of the second linked list, then they are intersecting.

2.8. Loop Detection:
     Given a circular linked list, implement an algorithm that returns the node at the beginning of the loop.

     DEFINITION

     Circular linked list: A (corrupt) linked list in which a node's next pointer points to the earlier node,
     so as to make a loop in the linked list

     EXAMPLE

     Input: A -> B -> C -> D -> E - C [the same C as earlier]
     Output: C

Chapter 3
---------
Stacks

3.1. Three in One:
     Describe how you could use a single array to implement three stacks.

3.2. Stack Min:
     How would you design a stack which, in addition to push and pop, has a function min which returns the minimum element?
     Push, pop and min should all operate in O(1) time.

3.3. Stack of Plates:

     Imagine a (literal) stack of plates. If the stack gets too high, it might topple.
     Therefore, in real life, we would likely start a new stack when the previous stack exceeds some threshold.
     Implement a data structure SetOfStacks that mimics this.
     SetOfStacks should be composed pf several stacks and should create a new stack once the previous one exceeds capacity.
     SetOfStacks.push() and SetOfStacks.pop() should behave identically to a single stack (that is, pop() should
     return the same values as it would if there were just a single stack.

     FOLLOW UP

     Implement a function popAt(int index) which performs a pop operation on a specific sub-stack.

3.4. Queue via Stacks:
     Implement an MyQueue class which implements a queue using two stacks.
     COMPLEMENTARY PROBLEM FROM ELSEWHERE:
     Implement a MyStack class which implements a stack using two queues.

3.5. Sort Stack:
     Write a program to sort a stack such that the smallest items are on the top.
     You can use an additional temporary stack, but you may not copy the elements into any other data structure
     (such as an array). The stack supports the following operations: push, pop, peek, and isEmpty.

3.6. Animal Shelter:
     An animal shelter holds only dogs and cats. People must adopt either the “oldest” animals,
     or they can select whether they would prefer a dog or a cat (and will receive the oldest animal of that type).
     They cannot select which specific animal they would like.

     Create the data structures to maintain this system and implement operations such as
     enqueue, dequeueAny, dequeueDog and dequeueCat.
     You may use the built-in LinkedList data structure.

Chapter 4
---------
Graphs and Trees

4.1. Route Between Nodes:
     Given a directed graph, design an algorithm to find out whether there is a route between two nodes.

4.2. Minimal Tree:
     Given a sorted (in increasing order) array with unique integer elements, write an algorithm
     to create a binary search tree with minimal height.

4.3. List of Depths:
     Given a binary tree, design an algorithm which creates a linked list of all the nodes at each depth
     (e.g., if you have a tree with depth D, you'll have D linked lists)

4.4. Check Balanced:
     Implement a function to check if a binary tree is balanced.
     For the purpose of this question, a balanced tree is defined to be a tree such that the heights of the two subtrees
     of any node never differ by more than one.

4.5. Validate BST:
     Implement a function to check if a binary tree is a binary search tree.

4.6. Successor:
     Write an algorithm to find the "next" node (i.e., in-order successor) of a given node in a binary search tree.
     You may assume that each node has a link to its parent.

4.7. Build Order:
     You are given a list of projects and a list of dependencies (which is a list of pairs of projects, where the first
     project is dependent on the second project). All of a project's dependencies must be built before the project is.
     Find the build order that will allow the projects to be built. If there is no valid build order, return an error.

     EXAMPLE:

     Input:
         projects:
             a, b, c, d, e, f
         dependencies:
             (d, a), (b, f), (d, b), (a, f), (c, d)
     Output:
         f, e, a, b, d, c

     First Common Ancestor:

4.8. Design an algorithm and write code to find the first common ancestor of two nodes in a binary tree.
     Avoid storing additional nodes in a data structure.

     NOTE:
     This is not necessarily a binary search tree.

4.9. BST Sequences:
     A binary search tree was created by traversing through an array from left to right and inserting each element.
     Given a binary search tree with distinct elements, print all possible arrays that could have led to this tree.
     EXAMPLE:
     Input:
             2
         1       3

     Output:
         {2, 1, 3}, {2, 3, 1}

4.10. Check Subtree:
     T1 and T2 are two very large binary trees, with T1 much bigger than T2.
     Create an algorithm to determine if T2 is a subtree of T1.
     A tree T2 is a subtree of T1 if there exists a node n in T1 such that the subtree of n is identical to T2.
     That is, if you cut off the tree at node n, the two trees would be identical.

4.11. Random Node:
     You are implementing a binary tree class from scratch which, in addition to insert, find, and delete, has a method
     getRandomNode() which returns a random node from the tree.
     All nodes should be equally likely to be chosen. Design and implement an algorithm for getRandomNode,
     and explain how you would implement the rest of the methods.

4.12. Paths with Sum:
     You are given a binary tree in which each node contains an integer value (which might be positive or negative)
     Design the algorithm to count the number of paths that sum to a given value. The path does not bneed to start or end at
     the root of a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

Chapter 5
---------
Bit Manipulation

5.1. Insertion:
     You are given two 32-bit numbers, N and M, and two bit positions, i and j. Write a method to insert M into N such that
     M starts at bit j and ends at bit i. You can assume that the bits j though i have enough space to fill all of M.
     That is, if M = 10011, you can assume that there are at least 5 bits between j and i. You would not, for example, have
     j = 3 and i = 2, because M could not fully fit between bit 3 and bit 2.

5.2. Binary to String:
     Given a real number between 0 and 1 (e.g., 0.72) that is passed as a double, print the binary representation.
     If the number cannot be represented accurately in binary with at most 32 characters, print "ERROR".


Chapter 8
---------

8.13. Stacks of Boxes:
     You have a stack of n boxes, with widths w_i, heights h_i, and depths d_i.
     The boxes cannot be rotated and and can only be stacked on top of one another if each box in the stack is
     larger than the box above it in width, height, and depth.
     Implement a method to compute the height of the tallest possible stack.
     The height of a stack is the sum of heights of each box.

Chapter 17
----------
17.25. Word Rectangle:
     Given a list of millions of words, design an algorithm to create the largest possible rectangle of letters
     such that every row forms a word (reading from left to right) and every column forms a word (reading top to bottom).
     The words need not be chosen consecutively from the list but all rows must be the same length and all columns
     must be the same height.


Misc problems
=============

[My interview with Udemy, 2015:]
Abbreviate "middle" parts of a name.

[An interview with Amazon, source unknown]
Connect nodes at same level of a binary tree recursively using O(1) space (we can ignore stack space used for recursion)
Tree node is like following:

struct node {
  int data;
  struct node* left;
  struct node* right;
  struct node* nextRight;
}

Initially, all the nextRight pointers point to garbage values.
Your function should set these pointers to point next right for each node.
You can use only constant extra space.

[My interview with HouseCanary, 2015]
Eliminate all consecutive pairs of characters in the string.
Do it until there are no pairs to remove, so 'abba' turns into an empty string:
'abcba' => 'abcba'
'aabc' => 'bc'

[My interview with Google, 2010]
Write a function or a method that implements "glob" expression matching.
Its input is a string S and a glob pattern P, the output is a boolean: True if S matches P, False otherwise.
There are two classes of special characters, or wildcards, in glob patterns:
"?" matches exactly one character, "*" matches any number of consecutive character, including the empty string (0 characters).

[My interview with unknown company, Ukraine, 1995]
Write a function that outputs a graph for a given mathematical function of single argument (e.g. sin(x) or cos(x)),
the [X0, X1] range on the X-axis, and the [Y0, Y1] range on the Y-axis.
The output is a sequence of lines containing ' ' and '*' characters only that is suitable for writing to a text file as "ASCII art"
or printing the graph on a printer that does not support graphics (like a punch printer).
